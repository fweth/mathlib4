/-
Copyright (c) 2025 Klaus Gy. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Klaus Gy
-/
import Mathlib.CategoryTheory.Monoidal.Cartesian.Basic
import Mathlib.CategoryTheory.Topos.Classifier
/-!
# Elementary Topos (in Elementary Form)

This ongoing work formalizes the elementary definition of a topos and the direct consequences.

## References

* [S. MacLane and I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
-/


universe u v

open CategoryTheory Category Functor Limits MonoidalCategory Opposite

variable {‚Ñ∞ : Type u} [Category.{v} ‚Ñ∞] [CartesianMonoidalCategory ‚Ñ∞]

/-- The covariant functor `B ‚äó [] ‚ü∂ C` from `‚Ñ∞·µí·µñ` to `Type`. -/
def WhiskeredHom (B C : ‚Ñ∞) : ‚Ñ∞·µí·µñ ‚•§ Type v :=
  ‚ü® ‚ü® fun A ‚Ü¶ B ‚äó unop A ‚ü∂ C, fun f g ‚Ü¶ (B ‚óÅ unop f) ‚â´ g ‚ü©,
    fun A ‚Ü¶ by
      have : unop (ùüô A) = ùüô (unop A) := by rfl
      ext; simp[this],
    fun f f' ‚Ü¶ by
      have : B ‚óÅ unop (f ‚â´ f') = B ‚óÅ unop f' ‚â´ B ‚óÅ unop f := by aesop_cat
      ext; simp[this] ‚ü©

/-- `P` is a power object of `B` if it represents the functor `WhiskeredHom B hc.Œ©`. -/
def IsPowerObjectOf (hc : Classifier ‚Ñ∞ (ùüô_ ‚Ñ∞)) (B P : ‚Ñ∞) :=
  RepresentableBy (WhiskeredHom B hc.Œ©) P

variable (‚Ñ∞)

/-- An elementary topos is a category with a fixed subobject classifier and power objects. -/
class ElementaryTopos [HasPullbacks ‚Ñ∞] where
  /-- A fixed choice of subobject classifier in `‚Ñ∞`. -/
  hc : Classifier ‚Ñ∞ (ùüô_ ‚Ñ∞)
  /-- Every `B` has a power object `P B`. -/
  P (B : ‚Ñ∞) : ‚Ñ∞
  /-- `P B` is a power object of `B`. -/
  hP (B : ‚Ñ∞) : IsPowerObjectOf hc B (P B)

namespace ElementaryTopos

variable {‚Ñ∞} [HasPullbacks ‚Ñ∞] [ElementaryTopos ‚Ñ∞]

/-- The P-transpose of a morphism `g : A ‚ü∂ P B`. -/
def hat {A : ‚Ñ∞} (B : ‚Ñ∞) (g : A ‚ü∂ P B) : B ‚äó A ‚ü∂ hc.Œ© :=
  (hP B).homEquiv.toFun g

/-- The P-transpose of a morphism `f : B √ó A ‚ü∂ Œ©`. -/
def unhat {A B : ‚Ñ∞} (f : B ‚äó A ‚ü∂ hc.Œ©) : (A ‚ü∂ P B) :=
  (hP B).homEquiv.invFun f

@[simp]
lemma hat_unhat {A B : ‚Ñ∞} (f : B ‚äó A ‚ü∂ hc.Œ©) :
  hat B (unhat f) = f := (hP B).homEquiv.apply_symm_apply f

@[simp]
lemma unhat_hat {A B : ‚Ñ∞} (g : A ‚ü∂ P B) :
  unhat (hat B g) = g := (hP B).homEquiv.symm_apply_apply g

/-- The element relation as a subobject of `B ‚®Ø (P B)`. -/
def Œµ_ (B : ‚Ñ∞) : B ‚äó (P B) ‚ü∂ hc.Œ© :=
  (hP B).homEquiv.toFun (ùüô (P B))

def comm {A B : ‚Ñ∞} (f : B ‚äó A ‚ü∂ hc.Œ©) : f = (B ‚óÅ (unhat f)) ‚â´ (Œµ_ B) := sorry

end ElementaryTopos
