/-
Copyright (c) 2025 Klaus Gy. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Klaus Gy
-/
import Mathlib.CategoryTheory.Monoidal.Cartesian.Basic
import Mathlib.CategoryTheory.Topos.Classifier
/-!
# Elementary Topos (in Elementary Form)

This ongoing work formalizes the elementary definition of a topos and the direct consequences.

## References

* [S. MacLane and I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
-/

universe u v

open CategoryTheory Category Functor Limits MonoidalCategory Opposite

variable {‚Ñ∞ : Type u} [Category.{v} ‚Ñ∞] [CartesianMonoidalCategory ‚Ñ∞]

/-- The covariant functor `B ‚äó [] ‚ü∂ C` from `‚Ñ∞·µí·µñ` to `Type`. -/
def WhiskeredHom (B C : ‚Ñ∞) : ‚Ñ∞·µí·µñ ‚•§ Type v :=
  ‚ü® ‚ü® fun A ‚Ü¶ B ‚äó unop A ‚ü∂ C, fun f g ‚Ü¶ (B ‚óÅ unop f) ‚â´ g ‚ü©,
    fun A ‚Ü¶ by
      have : unop (ùüô A) = ùüô (unop A) := by rfl
      ext; simp[this],
    fun f f' ‚Ü¶ by
      have : B ‚óÅ unop (f ‚â´ f') = B ‚óÅ unop f' ‚â´ B ‚óÅ unop f := by aesop_cat
      ext; simp[this] ‚ü©

/-- `P` is a power object of `B` if it represents the functor `WhiskeredHom B hc.Œ©`. -/
def IsPowerObjectOf (hc : Classifier ‚Ñ∞ (ùüô_ ‚Ñ∞)) (B P : ‚Ñ∞) :=
  (WhiskeredHom B hc.Œ©).RepresentableBy P

namespace PowerObject

variable {sc : Classifier ‚Ñ∞ (ùüô_ ‚Ñ∞)} {B PB : ‚Ñ∞} (hPB : IsPowerObjectOf sc B PB)

/-- The P-transpose of a morphism `g : A ‚ü∂ P B`. -/
def hat {A : ‚Ñ∞} (g : A ‚ü∂ PB) : B ‚äó A ‚ü∂ sc.Œ© :=
  hPB.homEquiv.toFun g

/-- The P-transpose of a morphism `f : B √ó A ‚ü∂ Œ©`. -/
def unhat {A : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) : (A ‚ü∂ PB) :=
  hPB.homEquiv.invFun f

@[simp]
lemma hat_unhat {A : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) :
  hat hPB (unhat hPB f) = f := hPB.homEquiv.apply_symm_apply f

@[simp]
lemma unhat_hat {A : ‚Ñ∞} (g : A ‚ü∂ PB) :
  unhat hPB (hat hPB g) = g := hPB.homEquiv.symm_apply_apply g

/-- The element relation as a subobject of `B ‚®Ø (P B)`. -/
def Œµ : B ‚äó (PB) ‚ü∂ sc.Œ© := hPB.homEquiv.toFun (ùüô (PB))

@[simp]
lemma comm {A : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) : (B ‚óÅ unhat hPB f) ‚â´ Œµ hPB = f := by
  have : hPB.homEquiv (unhat hPB f) = f := by unfold unhat; simp
  simpa [this] using Eq.symm (RepresentableBy.homEquiv_eq hPB (unhat hPB f))

lemma uniq {A : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) (g : A ‚ü∂ PB)
    (h : f = (B ‚óÅ g) ‚â´ Œµ hPB) : g = unhat hPB f := by
  have : hat hPB g = f := by rw [‚Üê comm hPB (hat hPB g)]; simp [h]
  simpa using congr(unhat hPB $this)

variable {C PC : ‚Ñ∞} (hPC : IsPowerObjectOf sc C PC)

/-- The morphism `P_map h` is the functorial action on a morphism `h : B ‚ü∂ C`,
    defined as the P-transpose of `ŒµC ‚àò (h ‚®Ø ùüô)`. -/
def P_map (h : B ‚ü∂ C) : PC ‚ü∂ PB := unhat hPB ((h ‚ñ∑ PC) ‚â´ Œµ hPC)

/-- Naturality (dinaturality) of `Œµ`. This corresponds to the naturality square of Œµ
    in MM92 diagram (5). -/
lemma Œµdinaturality (h : B ‚ü∂ C) :
  (h ‚ñ∑ PC) ‚â´ Œµ hPC = (B ‚óÅ (P_map hPB hPC h)) ‚â´ Œµ hPB := Eq.symm (comm hPB _)

/-- `P` covariantly preserves composition, shown by stacking dinaturality squares. -/
lemma P_compose {D PD : ‚Ñ∞} (hPD : IsPowerObjectOf sc D PD) (h : B ‚ü∂ C) (h' : C ‚ü∂ D) :
    P_map hPB hPD (h ‚â´ h') = P_map hPC hPD h' ‚â´ P_map hPB hPC h := by
  let comm_outer : (h ‚ñ∑ PD) ‚â´ (h' ‚ñ∑ PD) ‚â´ Œµ hPD =
      (B ‚óÅ (P_map _ _ h')) ‚â´ (B ‚óÅ (P_map _ _ h)) ‚â´ Œµ _ := by
    rw [Œµdinaturality hPC hPD, ‚Üê reassoc_of% whisker_exchange h, Œµdinaturality hPB hPC]
  rw [P_map]; simp
  rw[comm_outer, ‚Üê uniq _ _ (P_map hPC hPD h' ‚â´ P_map hPB hPC h) (by aesop_cat)]

end PowerObject

variable (‚Ñ∞) [HasPullbacks ‚Ñ∞]

/-- An elementary topos is a category with a fixed subobject classifier and power objects. -/
class ElementaryTopos [HasPullbacks ‚Ñ∞] where
  /-- A fixed choice of subobject classifier in `‚Ñ∞`. -/
  sc : Classifier ‚Ñ∞ (ùüô_ ‚Ñ∞)
  /-- The power object functor -/
  P : ‚Ñ∞·µí·µñ ‚•§ ‚Ñ∞
  /-- `P` actually assigns power objects. -/
  hP (B : ‚Ñ∞) : IsPowerObjectOf sc B (P.obj (op B))

namespace ElementaryTopos

section

open PowerObject

/-- Construct an elementary topos pointwise defined power objects. -/
def mkFromPointwisePowerObjects (sc : Classifier ‚Ñ∞ (ùüô_ ‚Ñ∞))
    (P' : ‚Ñ∞ ‚Üí ‚Ñ∞) (hP : ‚àÄ B : ‚Ñ∞, IsPowerObjectOf sc B (P' B)) : ElementaryTopos ‚Ñ∞ :=
  { sc := sc
    P :=
    { obj B := P' B.unop,
      map {B C} (h : B ‚ü∂ C) := P_map (hP C.unop) (hP B.unop) h.unop,
      map_id _ := Eq.symm (uniq (hP _) _ _ (by simp)),
      map_comp {B C D} _ _ := P_compose (hP D.unop) (hP C.unop) (hP B.unop) _ _ }
    hP := hP }

end

variable {‚Ñ∞} [ElementaryTopos ‚Ñ∞]

abbrev hat {A B : ‚Ñ∞} (g : A ‚ü∂ P.obj (op B)) := PowerObject.hat (hP B) g

abbrev unhat {A B : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) := PowerObject.unhat (hP B) f

@[simp]
abbrev hat_unhat {A B : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) := PowerObject.hat_unhat (hP B) f

@[simp]
abbrev unhat_hat {A B : ‚Ñ∞} (g : A ‚ü∂ P.obj (op B)) := PowerObject.unhat_hat (hP B) g

abbrev Œµ {B : ‚Ñ∞} : B ‚äó (P.obj (op B)) ‚ü∂ sc.Œ© := PowerObject.Œµ (hP B)

abbrev Œµdinaturality {B C : ‚Ñ∞} (h : B ‚ü∂ C) := PowerObject.Œµdinaturality (hP B) (hP C) h

end ElementaryTopos
