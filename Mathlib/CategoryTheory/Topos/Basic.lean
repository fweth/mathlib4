/-
Copyright (c) 2025 Klaus Gy. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Klaus Gy
-/
import Mathlib.CategoryTheory.Closed.PowerObjects
import Mathlib.CategoryTheory.Topos.Classifier
/-!
# Elementary Topos (in Elementary Form)

This ongoing work formalizes the elementary definition of a topos and its direct consequences,
ideally up to the proof of existence of exponential objects and colimits.

## References

* [S. MacLane and I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
-/

universe u v

open CategoryTheory Category Functor Limits MonoidalCategory PowerObject

variable (‚Ñ∞ : Type u) [Category.{v} ‚Ñ∞] [CartesianMonoidalCategory ‚Ñ∞]

/-- An elementary topos is a category with a fixed subobject classifier and power objects. -/
class ElementaryTopos [HasPullbacks ‚Ñ∞] where
  /-- A fixed choice of subobject classifier in `‚Ñ∞`. -/
  sc : Classifier ‚Ñ∞ (ùüô_ ‚Ñ∞)
  /-- Assignment of power objects. -/
  P (B : ‚Ñ∞) : ‚Ñ∞
  /-- `P` actually assigns power objects. -/
  hP (B : ‚Ñ∞) : IsPowerObjectOf sc B (P B)

namespace ElementaryTopos

variable {‚Ñ∞} [HasPullbacks ‚Ñ∞] [ElementaryTopos ‚Ñ∞]

/-- The P-transpose of a morphism `g : A ‚ü∂ P B`. -/
def hat {A B : ‚Ñ∞} (g : A ‚ü∂ (P B)) : B ‚äó A ‚ü∂ sc.Œ© := (hP B).homEquiv.toFun g

/-- The P-transpose of a morphism `f : B √ó A ‚ü∂ Œ©`. -/
def unhat {A B : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) : (A ‚ü∂ (P B)) := (hP B).homEquiv.invFun f

@[simp]
lemma hat_unhat {A B : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) : hat (unhat f) = f :=
  PowerObject.hat_unhat (hP B) f

@[simp]
lemma unhat_hat {A B : ‚Ñ∞} (g : A ‚ü∂ (P B)) : unhat (hat g) = g :=
  PowerObject.unhat_hat (hP B) g

/-- The element relation as a subobject of `B ‚®Ø (P B)`. -/
def Œµ (B : ‚Ñ∞) : B ‚äó (P B) ‚ü∂ sc.Œ© := (hP B).homEquiv.toFun (ùüô (P B))

lemma hatAsComp {A B : ‚Ñ∞} (g : A ‚ü∂ (P B)) : hat g = B ‚óÅ g ‚â´ Œµ B :=
  PowerObject.hatAsComp (hP B) g

@[simp]
lemma P_comm {A B : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) : B ‚óÅ (unhat f) ‚â´ Œµ B = f :=
  PowerObject.comm (hP B) f

lemma P_uniq {A B : ‚Ñ∞} (f : B ‚äó A ‚ü∂ sc.Œ©) (g : A ‚ü∂ P B)
    (h : f = B ‚óÅ g ‚â´ Œµ B) : g = unhat f := PowerObject.uniq (hP B) f g h

/-- The morphism `map h` is the functorial action on a morphism `h : B ‚ü∂ C`,
    defined as the P-transpose of `ŒµC ‚àò (h ‚®Ø ùüô)`. -/
def P_map {B C : ‚Ñ∞} (h : B ‚ü∂ C) : (P C) ‚ü∂ (P B) :=
  PowerObject.map (hP B) (hP C) h

lemma P_dinaturality {B C : ‚Ñ∞} (h : B ‚ü∂ C) : h ‚ñ∑ (P C) ‚â´ Œµ C = B ‚óÅ P_map h ‚â´ Œµ B :=
  PowerObject.dinaturality (hP B) (hP C) h

lemma P_compose {B C D : ‚Ñ∞} (h : B ‚ü∂ C) (h' : C ‚ü∂ D) : P_map (h ‚â´ h') = P_map h' ‚â´ P_map h :=
  PowerObject.compose (hP B) (hP C) (hP D) h h'

/-- The power object functor -/
def P_functor : ‚Ñ∞·µí·µñ ‚•§ ‚Ñ∞ := PowerObject.functor P hP

end ElementaryTopos
